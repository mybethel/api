#!/usr/bin/env node
const spawn = require('child_process').spawn;
const heroku = require('./lib/heroku-config');

const appName = 'bethel-api';
const dbName = 'mybethel';
const dbUser = 'bethel';

const commonConfig = [
  '--archive=databaseProd.archive',
  `--db=${dbName}`,
  `--username=${dbUser}`,
  '--ssl',
  '--sslAllowInvalidCertificates',
];

/**
 * Copy Production database to Development
 * --
 * The following script will automate the process of dumping the Production
 * database to the deployed Development database. This is done by running a
 * combination of `mongodump` and `mongorestore`. Credentials are grabbed from
 * Heroku so it is important to have the Heroku Toolbelt installed which
 * includes the CLI application.
 */
heroku(appName).then(config => {
  if (!config.DB_MONGO) {
    console.error('A production database address must be set.');
    process.exit(-1);
  }

  const connection = config.DB_MONGO.match(/(?:mongodb:\/\/)bethel:(.*)@(.*:\d+)(?:\/mybethel)/i);
  archiveProduction(connection[2], connection[1])
    .then(() => {
      if (process.argv.indexOf('--local') > 0)
        return restoreToLocal();

      if (!config.MONGO_MASTER_DEV) {
        console.error('A development database address must be set.');
        process.exit(-1);
      }

      restoreToDevelopment(
        config.MONGO_MASTER_DEV,
        config.MONGO_PORT_DEV,
        config.MONGO_PASS_DEV
      );
    })
    .catch(console.error);
}).catch(() => process.exit(-1));

/**
 * Archive the Production database locally. Spawns an instance of `mongodump`
 * which it uses to archive the databse to `databaseProd.archive` locally.
 * @param {String} database - The complete connection string for the database.
 * The username, password and replicaset address will be extracted with Regex.
 * @return {Promise} - Fulfilled when the dump has completed.
 */
function archiveProduction(host, password) {
  const dumpConfig = commonConfig.concat([
    `--host=${host}`,
    `-p${password}`,
    '--excludeCollection=system.users',
  ]);

  return new Promise((resolve, reject) => {
    const dump = spawn('mongodump', dumpConfig);

    dump.stdout.on('data', data => console.log(String(data)));
    dump.stderr.on('data', data => console.error(String(data)));
    dump.on('exit', code => {
      if (code !== 0) {
        console.error(dumpConfig);
        reject('Unable to dump Production database.');
      }
      resolve();
    });
    dump.on('error', reject);
  });
}

/**
 * Restore the dumpfile created during the `archiveProduction()` step.
 * @param {String} database - The complete connection string for the database.
 * The username, password and replicaset address will be extracted with Regex.
 */
function restoreToDevelopment(host, port, password) {
  runRestore(commonConfig.concat([
    `--host=${host}:${port}`,
    `-p${password}`,
    '--drop',
  ]));
}

/**
 * Restore the dumpfile created during the `archiveProduction()` step to the
 * local database. You need to have the connection defined in `config/local.js`
 * pointing to your local database for this step to work.
 */
function restoreToLocal() {
  const localConfig = require('../config/env/local.js');
  const database = 'mongodb://localhost:32768/mybethel';
  const connection = database.match(/(?:mongodb:\/\/)(.*:\d+)(?:\/.*)/i);
  runRestore([
    '--archive=databaseProd.archive',
    `--host=${connection[1]}`,
    `--db=${dbName}`,
    '--drop',
  ]);
}

/**
 * Run the restore step which uses `mongorestore`.
 * @param {Array} config - Array of options to pass to the script.
 */
function runRestore(config) {
  const restore = spawn('mongorestore', config);

  restore.stdout.on('data', data => console.log(String(data)));
  restore.stderr.on('data', data => console.error(String(data)));
  restore.on('exit', code => {
    if (code !== 0) {
      console.error(config);
      console.error('Unable to restore Production to Dev.');
      process.exit(-1);
    }

    process.exit(0);
  });
  restore.on('error', () => {
    console.warn('mongorestore does not appear to be installed.');
    process.exit(-1);
  });
}
